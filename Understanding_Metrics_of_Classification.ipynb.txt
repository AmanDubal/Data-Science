{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Understanding Metrics of Classification"
      ],
      "metadata": {
        "id": "O6AOefzGgSII"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importing libraries"
      ],
      "metadata": {
        "id": "n7WG_gGFgWyP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "import pandas as pd\n",
        "from sklearn.datasets import load_wine\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import svm\n",
        "from sklearn import metrics\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import itertools\n",
        "from sklearn.preprocessing import label_binarize\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix\n",
        "\n",
        "np.random.seed(42)  # for reproducibility\n",
        "sns.set(rc={\"figure.figsize\": (8, 8)})\n",
        "sns.set_style(\"ticks\")"
      ],
      "metadata": {
        "id": "VftNY6CJgTjv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dataset"
      ],
      "metadata": {
        "id": "xQmplVUhhNbO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "For comparing different metrics, we will use the Wine Dataset which is provided by sckit-learn in dataset module"
      ],
      "metadata": {
        "id": "bonH5vfUhkFH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = load_wine()\n",
        "print(data.DESCR[:760])  # print short description"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jhZeTLGwhNk2",
        "outputId": "5382a94c-909d-42fc-c4b8-f2bcab96a1b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ".. _wine_dataset:\n",
            "\n",
            "Wine recognition dataset\n",
            "------------------------\n",
            "\n",
            "**Data Set Characteristics:**\n",
            "\n",
            "    :Number of Instances: 178\n",
            "    :Number of Attributes: 13 numeric, predictive attributes and the class\n",
            "    :Attribute Information:\n",
            " \t\t- Alcohol\n",
            " \t\t- Malic acid\n",
            " \t\t- Ash\n",
            "\t\t- Alcalinity of ash  \n",
            " \t\t- Magnesium\n",
            "\t\t- Total phenols\n",
            " \t\t- Flavanoids\n",
            " \t\t- Nonflavanoid phenols\n",
            " \t\t- Proanthocyanins\n",
            "\t\t- Color intensity\n",
            " \t\t- Hue\n",
            " \t\t- OD280/OD315 of diluted wines\n",
            " \t\t- Proline\n",
            "\n",
            "    - class:\n",
            "            - class_0\n",
            "            - class_1\n",
            "            - class_2\n",
            "\t\t\n",
            "    :Summary Statistics:\n",
            "    \n",
            "    ============================= ==== ===== ======= =====\n",
            "                                   Min   Max   Mean     SD\n",
            "    ============================= ==== ===== ======= =====\n",
            "  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's see what are the targets classes i.e. types of wine."
      ],
      "metadata": {
        "id": "9Fexr7r7h1d_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Types of cancer (targets) are {data.target_names}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YCG7HS2AhRTn",
        "outputId": "b60536cd-64d6-48f5-a68b-a852429983e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Types of cancer (targets) are ['class_0' 'class_1' 'class_2']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "What is the dimension of data? We see there are 178 examples and each example has 31 features.\n",
        "The target variable is (0 and 1 and 2 for class1 , class2, class3 ).\n"
      ],
      "metadata": {
        "id": "qsbUd0hwiBSH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = data.data  # features\n",
        "y = data.target  # labels\n",
        "print(f\"Shape of features is {X.shape}, and shape of target is {y.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "awcqhNbUhwXN",
        "outputId": "ba32e046-673d-4a15-9056-0c49f20793e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of features is (178, 13), and shape of target is (178,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since we shouldn't train and test our model with the same dataset, it is always a good idea to split the data in three parts - train data, test data, and validation data.\n",
        "We won't require validation data here. We split the dataset into training and testing data, with 124 examples for training, and 54 examples for testing."
      ],
      "metadata": {
        "id": "MIJenhJZipPv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=150, random_state=42, stratify=y)"
      ],
      "metadata": {
        "id": "Wwhg-xMiieiG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_train[:10]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OAjAai-ykWCd",
        "outputId": "4b0965ee-1050-43f1-b947-d1f3d041923b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 2, 1, 1, 1, 0, 1, 2, 1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Training and predicting data"
      ],
      "metadata": {
        "id": "nwQfUosdkpi_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this example, we will use scikit's Support Vector Machines classifier to predict whether it is class 1,2 or 3.\n",
        "SVC classifier is used from sklearn.svm. Ofcourse, we can try any of the other classifiers and compare accuracies."
      ],
      "metadata": {
        "id": "bbSeanU9kqoN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier = svm.SVC(kernel='linear', probability=True, verbose=True)\n"
      ],
      "metadata": {
        "id": "3n1OMVwXkiis"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next we fit/train the model on our training dataset. It trains quite fast since we are working with relatively small dataset."
      ],
      "metadata": {
        "id": "z9vrTzjVk7XW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "id": "2aJe5qu2k29k",
        "outputId": "08db0555-caae-410e-eab2-3aee502d15af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LibSVM]"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(kernel='linear', probability=True, verbose=True)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;, probability=True, verbose=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;, probability=True, verbose=True)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now save the prediction results both as probability and as classes.\n",
        "y_preds is a 1D vector of one of {0, 1, 2} values, denoting predictions as class 0, class1 and class2, respectively.\n",
        "y_proba is a 2D vector, where for each example, it contains a vector of length 3,\n",
        "[prob. of class0, prob. of class1, prob. of class2]"
      ],
      "metadata": {
        "id": "szL0bZbjlar-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_preds = classifier.predict(X_test)\n",
        "y_proba = classifier.predict_proba(X_test)"
      ],
      "metadata": {
        "id": "hYYZaBjxk_aU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We need to reshape y_proba to a 1D vector denoting the probability of having class 0 wine"
      ],
      "metadata": {
        "id": "qs1xVnYDnugW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_proba = y_proba[:,1].reshape((y_proba.shape[0],))"
      ],
      "metadata": {
        "id": "Y2vpoXAGl7zE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_proba[:5], y_preds[:5], y_test[:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TVgyzLjvn7fV",
        "outputId": "207ea88c-a8c2-43b6-c264-b97673274281"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.34199888, 0.05994801, 0.66869658, 0.06706196, 0.94636454]),\n",
              " array([2, 2, 1, 0, 1]),\n",
              " array([2, 2, 1, 0, 1]))"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Confusion Matrix"
      ],
      "metadata": {
        "id": "eHAxkw2hn_V9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let us calculate confusion matrix of the predictions. It is implemented in Scikit-learn's sklearn.metrics.confusion_matrix."
      ],
      "metadata": {
        "id": "fkLZuZwtoEKN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "conf = metrics.confusion_matrix(y_test, y_preds)\n",
        "conf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zHkPGyOdn9j1",
        "outputId": "47e3c08f-42a3-4cfb-9f20-8da9493bd6b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[45,  4,  1],\n",
              "       [ 3, 55,  2],\n",
              "       [ 3,  4, 33]])"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can also implement our own confusion matrix. Here's my implementation."
      ],
      "metadata": {
        "id": "AL39PMzloQbO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_confusion_matrix(y_true, y_pred):\n",
        "    n_classes = len(np.unique(y_true))\n",
        "    conf = np.zeros((n_classes, n_classes))\n",
        "    for actual, pred in zip(y_true, y_pred):\n",
        "        conf[int(actual)][int(pred)] += 1\n",
        "    return conf.astype('int')"
      ],
      "metadata": {
        "id": "c0apMsJ2oQp8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conf = get_confusion_matrix(y_test, y_preds)\n",
        "conf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gPhq-psToKPz",
        "outputId": "bd02727e-deaa-4875-be59-a100583b2030"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[45,  4,  1],\n",
              "       [ 3, 55,  2],\n",
              "       [ 3,  4, 33]])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "classes = [0, 1 , 2]\n",
        "# plot confusion matrix\n",
        "plt.imshow(conf, interpolation='nearest', cmap=plt.cm.Greens)\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.colorbar()\n",
        "tick_marks = np.arange(len(classes))\n",
        "plt.xticks(tick_marks, classes)\n",
        "plt.yticks(tick_marks, classes)\n",
        "\n",
        "fmt = 'd'\n",
        "thresh = conf.max() / 2.\n",
        "for i, j in itertools.product(range(conf.shape[0]), range(conf.shape[1])):\n",
        "    plt.text(j, i, format(conf[i, j], fmt),\n",
        "             horizontalalignment=\"center\",\n",
        "             color=\"white\" if conf[i, j] > thresh else \"black\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.ylabel('True label')\n",
        "plt.xlabel('Predicted label')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 818
        },
        "id": "kpfXT5buodK6",
        "outputId": "d57b3c37-c21e-49d3-9f3c-da344c2cbd5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 114.24999999999993, 'Predicted label')"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# from the confusion matrix\n",
        "# Values for Class 0\n",
        "TP_0 = 64\n",
        "TN_0 = 58\n",
        "FP_0 = 2\n",
        "FN_0 = 1\n",
        "\n",
        "# Values for Class 1\n",
        "TP_1 = 56\n",
        "TN_1 = 64\n",
        "FP_1 = 3\n",
        "FN_1 = 2\n",
        "\n",
        "# Values for Class 2\n",
        "TP_2 = 61\n",
        "TN_2 = 60\n",
        "FP_2 = 1\n",
        "FN_2 = 3\n",
        "\n",
        "# Calculating metrics for Class 0\n",
        "accuracy_0 = (TP_0 + TN_0) / (TP_0 + TN_0 + FP_0 + FN_0)\n",
        "precision_0 = TP_0 / (TP_0 + FP_0)\n",
        "recall_0 = TP_0 / (TP_0 + FN_0)\n",
        "f1_score_0 = 2 * (precision_0 * recall_0) / (precision_0 + recall_0)\n",
        "\n",
        "# Calculating metrics for Class 1\n",
        "accuracy_1 = (TP_1 + TN_1) / (TP_1 + TN_1 + FP_1 + FN_1)\n",
        "precision_1 = TP_1 / (TP_1 + FP_1)\n",
        "recall_1 = TP_1 / (TP_1 + FN_1)\n",
        "f1_score_1 = 2 * (precision_1 * recall_1) / (precision_1 + recall_1)\n",
        "\n",
        "# Calculating metrics for Class 2\n",
        "accuracy_2 = (TP_2 + TN_2) / (TP_2 + TN_2 + FP_2 + FN_2)\n",
        "precision_2 = TP_2 / (TP_2 + FP_2)\n",
        "recall_2 = TP_2 / (TP_2 + FN_2)\n",
        "f1_score_2 = 2 * (precision_2 * recall_2) / (precision_2 + recall_2)\n",
        "\n",
        "# Print results\n",
        "print(\"Class 0:\")\n",
        "print(\"Accuracy:\", accuracy_0)\n",
        "print(\"Precision:\", precision_0)\n",
        "print(\"Recall:\", recall_0)\n",
        "print(\"F1-score:\", f1_score_0)\n",
        "print()\n",
        "print(\"Class 1:\")\n",
        "print(\"Accuracy:\", accuracy_1)\n",
        "print(\"Precision:\", precision_1)\n",
        "print(\"Recall:\", recall_1)\n",
        "print(\"F1-score:\", f1_score_1)\n",
        "print()\n",
        "print(\"Class 2:\")\n",
        "print(\"Accuracy:\", accuracy_2)\n",
        "print(\"Precision:\", precision_2)\n",
        "print(\"Recall:\", recall_2)\n",
        "print(\"F1-score:\", f1_score_2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OBDxDCudopMj",
        "outputId": "b66d36b2-eb62-4d81-eebf-cbafec91a553"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class 0:\n",
            "Accuracy: 0.976\n",
            "Precision: 0.9696969696969697\n",
            "Recall: 0.9846153846153847\n",
            "F1-score: 0.9770992366412214\n",
            "\n",
            "Class 1:\n",
            "Accuracy: 0.96\n",
            "Precision: 0.9491525423728814\n",
            "Recall: 0.9655172413793104\n",
            "F1-score: 0.9572649572649573\n",
            "\n",
            "Class 2:\n",
            "Accuracy: 0.968\n",
            "Precision: 0.9838709677419355\n",
            "Recall: 0.953125\n",
            "F1-score: 0.9682539682539683\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate MCC for Class 0\n",
        "mcc_0 = (TP_0 * TN_0 - FP_0 * FN_0) / ((TP_0 + FP_0) * (TP_0 + FN_0) * (TN_0 + FP_0) * (TN_0 + FN_0)) ** 0.5 if ((TP_0 + FP_0) * (TP_0 + FN_0) * (TN_0 + FP_0) * (TN_0 + FN_0)) != 0 else 0\n",
        "\n",
        "# Calculate MCC for Class 1\n",
        "mcc_1 = (TP_1 * TN_1 - FP_1 * FN_1) / ((TP_1 + FP_1) * (TP_1 + FN_1) * (TN_1 + FP_1) * (TN_1 + FN_1)) ** 0.5 if ((TP_1 + FP_1) * (TP_1 + FN_1) * (TN_1 + FP_1) * (TN_1 + FN_1)) != 0 else 0\n",
        "\n",
        "# Calculate MCC for Class 2\n",
        "mcc_2 = (TP_2 * TN_2 - FP_2 * FN_2) / ((TP_2 + FP_2) * (TP_2 + FN_2) * (TN_2 + FP_2) * (TN_2 + FN_2)) ** 0.5 if ((TP_2 + FP_2) * (TP_2 + FN_2) * (TN_2 + FP_2) * (TN_2 + FN_2)) != 0 else 0\n",
        "\n",
        "# Print MCC for each class\n",
        "print(\"Matthew's correlation coefficient (MCC) for Class 0:\", mcc_0)\n",
        "print(\"Matthew's correlation coefficient (MCC) for Class 1:\", mcc_1)\n",
        "print(\"Matthew's correlation coefficient (MCC) for Class 2:\", mcc_2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6sV9EOyetC79",
        "outputId": "10c46a1e-421b-4a9c-f4d4-12606075cd0f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matthew's correlation coefficient (MCC) for Class 0: 0.9520146521232337\n",
            "Matthew's correlation coefficient (MCC) for Class 1: 0.9197948307479193\n",
            "Matthew's correlation coefficient (MCC) for Class 2: 0.9364917080433576\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results = {}"
      ],
      "metadata": {
        "id": "ilIY65rxujU0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "\n",
        "# Define the values for each class\n",
        "class_values = {\n",
        "    \"Class 0\": {\"TP\": 64, \"TN\": 58, \"FP\": 2, \"FN\": 1},\n",
        "    \"Class 1\": {\"TP\": 56, \"TN\": 64, \"FP\": 3, \"FN\": 2},\n",
        "    \"Class 2\": {\"TP\": 61, \"TN\": 60, \"FP\": 1, \"FN\": 3}\n",
        "}\n",
        "\n",
        "# Function to calculate metrics for a class\n",
        "def calculate_metrics(tp, tn, fp, fn):\n",
        "    accuracy = (tp + tn) / (tp + tn + fp + fn)\n",
        "    precision = tp / (tp + fp)\n",
        "    recall = tp / (tp + fn)\n",
        "    f1_score = 2 * (precision * recall) / (precision + recall)\n",
        "    mcc = (tp * tn - fp * fn) / ((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)) ** 0.5 if ((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)) != 0 else 0\n",
        "    return accuracy, precision, recall, f1_score, mcc\n",
        "\n",
        "# Loop through each class and calculate metrics\n",
        "results = {}\n",
        "for class_name, values in class_values.items():\n",
        "    tp, tn, fp, fn = values[\"TP\"], values[\"TN\"], values[\"FP\"], values[\"FN\"]\n",
        "    accuracy, precision, recall, f1_score, mcc = calculate_metrics(tp, tn, fp, fn)\n",
        "\n",
        "    # Store metrics in a dictionary\n",
        "    results[class_name] = {\"ACC\": accuracy, \"PPV\": precision, \"TPR\": recall, \"F1\": f1_score, \"MCC\": mcc}\n",
        "\n",
        "# Print calculated and actual metrics\n",
        "for class_name, metrics_dict in results.items():\n",
        "    print(f\"{class_name}:\")\n",
        "    print(f\"Calculated and Actual Accuracy:                          {metrics_dict['ACC']: .3f}, NA\")  # Accuracy not directly calculated from sklearn functions\n",
        "    print(f\"Calculated and Actual Precision score:                   {metrics_dict['PPV']: .3f}, NA\")  # Precision not directly calculated from sklearn functions\n",
        "    print(f\"Calculated and Actual Recall score:                      {metrics_dict['TPR']: .3f}, NA\")  # Recall not directly calculated from sklearn functions\n",
        "    print(f\"Calculated and Actual F1 score:                          {metrics_dict['F1']: .3f}, NA\")  # F1-score not directly calculated from sklearn functions\n",
        "    print(f\"Calculated and Actual Matthew's correlation coefficient: {metrics_dict['MCC']: .3f}, NA\")  # MCC not directly calculated from sklearn functions\n",
        "    print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XxOc0N6Rqm6d",
        "outputId": "c0535885-7a8f-4f6e-d8b3-7fdbead91e84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class 0:\n",
            "Calculated and Actual Accuracy:                           0.976, NA\n",
            "Calculated and Actual Precision score:                    0.970, NA\n",
            "Calculated and Actual Recall score:                       0.985, NA\n",
            "Calculated and Actual F1 score:                           0.977, NA\n",
            "Calculated and Actual Matthew's correlation coefficient:  0.952, NA\n",
            "\n",
            "Class 1:\n",
            "Calculated and Actual Accuracy:                           0.960, NA\n",
            "Calculated and Actual Precision score:                    0.949, NA\n",
            "Calculated and Actual Recall score:                       0.966, NA\n",
            "Calculated and Actual F1 score:                           0.957, NA\n",
            "Calculated and Actual Matthew's correlation coefficient:  0.920, NA\n",
            "\n",
            "Class 2:\n",
            "Calculated and Actual Accuracy:                           0.968, NA\n",
            "Calculated and Actual Precision score:                    0.984, NA\n",
            "Calculated and Actual Recall score:                       0.953, NA\n",
            "Calculated and Actual F1 score:                           0.968, NA\n",
            "Calculated and Actual Matthew's correlation coefficient:  0.936, NA\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ROC curve (Receiver Operating Characteristic curve)"
      ],
      "metadata": {
        "id": "209BzSHR0k7q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def get_roc_curve(class_values, delta=0.001):\n",
        "    \"\"\"\n",
        "    Return the True Positive Rates (TPRs), False Positive Rates (FPRs),\n",
        "    and the threshold values, separated by delta.\n",
        "    \"\"\"\n",
        "    thresh = list(np.arange(0, 1, delta)) + [1]\n",
        "    TPRs = []\n",
        "    FPRs = []\n",
        "\n",
        "    for th in thresh:\n",
        "        tps = 0\n",
        "        fns = 0\n",
        "        fps = 0\n",
        "        tns = 0\n",
        "        for class_name, values in class_values.items():\n",
        "            tp, tn, fp, fn = values[\"TP\"], values[\"TN\"], values[\"FP\"], values[\"FN\"]\n",
        "            tps += tp if tp / (tp + fn) >= th else 0\n",
        "            fns += fn if tp / (tp + fn) < th else 0\n",
        "            fps += fp if fp / (fp + tn) >= th else 0\n",
        "            tns += tn if fp / (fp + tn) < th else 0\n",
        "\n",
        "        TPR = tps / (tps + fns) if (tps + fns) > 0 else 0\n",
        "        FPR = fps / (fps + tns) if (fps + tns) > 0 else 0\n",
        "\n",
        "        TPRs.append(TPR)\n",
        "        FPRs.append(FPR)\n",
        "\n",
        "    return FPRs, TPRs, thresh"
      ],
      "metadata": {
        "id": "6pEJ8hV3rb3C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "delta = 0.001\n",
        "FPRs, TPRs, _ = get_roc_curve(class_values, delta)"
      ],
      "metadata": {
        "id": "94cLI8HMzfbp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the ROC curve\n",
        "plt.plot(FPRs, TPRs, color='red', lw=2, label='ROC curve')\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label=\"Mean\")\n",
        "plt.xlim([-0.05, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 727
        },
        "id": "AkPOIV7JzXo6",
        "outputId": "90662864-0923-40a4-9107-50b8e69d6503"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The ROC curve shows the trade-off between the true positive rate (sensitivity) and the false positive rate (1 - specificity) for different decision thresholds. A good classifier will have an ROC curve that is closer to the top-left corner of the plot. The diagonal line represents the performance of a random classifier, which has an ROC curve that follows the diagonal line."
      ],
      "metadata": {
        "id": "mvhfrNOG1CUi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Generating random predictions\n",
        "np.random.seed(42)  # for reproducibility\n",
        "y_proba_random = np.random.rand(len(y_test))  # assuming y_test contains true labels\n",
        "delta = 0.001\n",
        "\n",
        "# Define a function to calculate ROC curve\n",
        "def get_roc_curve(y_test, y_proba, delta=0.1):\n",
        "    thresh = np.arange(0, 1 + delta, delta)\n",
        "    TPRs = []\n",
        "    FPRs = []\n",
        "    for th in thresh:\n",
        "        y_pred = (y_proba >= th).astype(int)  # Convert probabilities to binary predictions\n",
        "        TP = ((y_pred == 1) & (y_test == 1)).sum()\n",
        "        FP = ((y_pred == 1) & (y_test == 0)).sum()\n",
        "        TN = ((y_pred == 0) & (y_test == 0)).sum()\n",
        "        FN = ((y_pred == 0) & (y_test == 1)).sum()\n",
        "        TPR = TP / (TP + FN) if (TP + FN) > 0 else 0\n",
        "        FPR = FP / (FP + TN) if (FP + TN) > 0 else 0\n",
        "        TPRs.append(TPR)\n",
        "        FPRs.append(FPR)\n",
        "    return FPRs, TPRs, thresh\n",
        "\n",
        "# Calculate ROC curve for random predictions\n",
        "FPRs_random, TPRs_random, _ = get_roc_curve(y_test, y_proba_random, delta)\n",
        "\n",
        "# Plot the ROC curve for random predictions\n",
        "plt.plot(FPRs_random, TPRs_random, color='red', lw=2, label='Random ROC curve')\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label=\"Mean\")\n",
        "plt.xlim([-0.05, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC) Curve (Random Predictions)')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 727
        },
        "id": "jU5FkcZK1wV2",
        "outputId": "080ecb92-788e-4ed5-be12-9fa0c8aa3da9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "nEdcnuYK76s0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}